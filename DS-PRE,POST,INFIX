#include<iostream>
#include<string.h>
#include<ctype.h>
using namespace std;
typedef struct node
{
char data;
struct node *next;
}node;
class stack
{
public:
int top;
node* a[50];
stack()
{
top=-1;
}
char TOP()
{
if(top!=-1)
return a[top]->data;
}
int empty()
{
if(top==-1)
return 1;
else return 0;
}
void push(char x)
{
node *N;
N=new node;
N->data=x;
N->next=NULL;
top++;
a[top]=N;
}
char pop()
{
char y;
if(!empty())
{
y=a[top]->data;
top–;
return y;
}
}
void inf2post(char inf[],char post[]);
void inf2pre(char inf[],char pre[]);
int priority(char x);
int operation(char token,int op1,int op2);
int preeval(char pre[]);
int posteval(char post[]);
};
int stack::posteval(char post[])
{
char token;
int i,x,op1,op2,result;
i=0;
while(post[i]!=’\0′)
{
token=post[i];
if(isalnum(token))
{
cout<<“\nEnter the valu of the token”<<token;
cin>>x;
push(x);
}
else
{
op1=pop();
op2=pop();
result=operation(token,op1,op2);
push(result);
}
i++;
}
result=pop();
return result;
}
int stack::preeval(char pre[])
{
char token;
int i,x,op1,op2,result;
i=strlen(pre);
i=i-1;
for(i;i>=0;i–)
{
token=pre[i];
if(isalnum(token))
{
cout<<“\nEnter the valu of the variable”<<token;
cin>>x;
push(x);
}
else
{
op1=pop();
op2=pop();
result=operation(token,op1,op2);
push(result);
}
}
result=pop();
return result;
}
int stack::operation(char token,int op1,int op2)
{
if(token==’+’)
return op1+op2;
else if(token==’-‘)
return op1-op2;
else if(token==’*’)
return op1*op2;
else if(token==’/’)
return op1/op2;
}
int stack::priority(char x)
{ char token=x;
if(x=='(‘)
return 0;
else if(token==’+’||token==’-‘)
return 1;
else if(token==’*’||token==’/’||token==’%’)
return 2;
else if(token==’^’)
return 3;
}
void stack::inf2post(char inf[],char post[])
{
int i=0,j=0;
char token;
char x;
while(inf[i]!=’\0′)
{
token=inf[i];
if(isalnum(token))
post[j++]=token;
else if(token=='(‘)
{
push(token);
}
else if(token==’)’)
{
x=pop();
while(x!='(‘)
post[j++]=x;
}
else
{
while(priority(token)<=priority(TOP())&&!empty())
{
post[j++]=pop();
}
push(token);
}
i++;
}
while(!empty())
{
post[j++]=pop();
}
post[j]=’\0′;
}
void stack::inf2pre(char inf[],char pre[])
{
int i=0;
strrev(inf);
while(inf[i]!=’\0’)
{
if(inf[i]=='(‘)
inf[i]=’)’;
else if(inf[i]==’)’)
inf[i]='(‘;
i++;
}
inf2post(inf,pre);
strrev(pre);
}
int main()
{
stack s;
int ch;
char inf[10],pre[10],post[10];
cout<<“\nEnter the infix expression”;
cin>>inf;
while(1)
{
cout<<“\nMENU\n1.inf to post\n2.inf to pre\n3.prefix evalution”;
cout<<“\nEnter your choice”;
cin>>ch;
switch(ch)
{
case 1: cout<<“\nPost fix expression is”;
s.inf2post(inf,post);
cout<<post;
break;
case 2: cout<<“\nInfix expression is”;
s.inf2pre(inf,pre);
cout<<pre;
break;
case 3: cout<<“\nResult is”<<s.preeval(pre);
break;
case 4: cout<<“\nResult is”<<s.posteval(post);
break;
}
}
return 0;
}
